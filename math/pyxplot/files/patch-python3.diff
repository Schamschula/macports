--- buildScripts/parser_data.py	(original)
+++ buildScripts/parser_data.py	(refactored)
@@ -1,3 +1,4 @@
+from __future__ import print_function
 # parser_data.py
 #
 # The code in this file is part of Pyxplot
@@ -139,7 +140,7 @@
       if   (parts[0]=="%p"): varcount += 2 # Position vectors require 2 or 3 slots
       elif (parts[0]=="%P"): varcount += 3
       else                 : varcount += 1 # Varcount keeps track of the slot number to place the next variable in
-    elif (parts[0] in ["%p","%P"]): print "Danger in command %s: sharing position variable name with other variables of different lengths"%directive
+    elif (parts[0] in ["%p","%P"]): print("Danger in command %s: sharing position variable name with other variables of different lengths"%directive)
     outnum = varnames[varname]
     parts.append("%s"%outnum) # parts[4] = slot number
     if word.startswith("]:"):
@@ -155,7 +156,7 @@
   for i,j in varnames.iteritems():
    if '%' not in directive:
     key = "PARSE_%s_%s%s"%(directive,setoption,sanitize(i))
-    if (key in includeKeys) and (includeKeys[key]!=j): print "Repetition of key %s"%key
+    if (key in includeKeys) and (includeKeys[key]!=j): print("Repetition of key %s"%key)
     includeKeys[key] = j
     f_h.write("#define %s %d\n"%(key,j)) # Write #defines to convert variable names into slot numbers
 
--- buildScripts/colorlistGenerate.py	(original)
+++ buildScripts/colorlistGenerate.py	(refactored)
@@ -19,6 +19,7 @@
 
 # ----------------------------------------------------------------------------
 
+from builtins import range
 color_list={
 "greenYellow": [0.15, 0, 0.69, 0],
 "yellow": [0, 0, 1, 0],
@@ -98,7 +99,7 @@
  color_list["grey%02d"%greylevel] = [0, 0, 0, float(100-greylevel)/100]
  color_list["gray%02d"%greylevel] = [0, 0, 0, float(100-greylevel)/100]
 
-color_names = color_list.keys()
+color_names = list(color_list.keys())
 color_names.sort()
 
 # Write ppl_colors.h
RefactoringTool: Refactored ./parser_data.py
--- buildScripts/parser_data.py	(original)
+++ buildScripts/parser_data.py	(refactored)
@@ -20,6 +20,7 @@
 # ----------------------------------------------------------------------------
 
 # Generate table of positions of variables by name
+from builtins import range
 globalVarNames = []
 globalVarTable = {}
 
@@ -28,7 +29,7 @@
  if '%' in directive: return
  key = "%s_%s"%(directive,setOption)
  globalVarTable[key] = vt
- for name,pos in vt.iteritems():
+ for name,pos in vt.items():
   if name not in globalVarNames: globalVarNames.append(name)
 
 def printVarTable():
@@ -36,7 +37,7 @@
  globalVarNames.sort()
  for i in range(len(globalVarNames)):
    f_h.write("#define PARSE_INDEX_%s %d\n"%(sanitize(globalVarNames[i]),i))
- keys = globalVarTable.keys()
+ keys = list(globalVarTable.keys())
  keys.sort()
  for k in keys:
    d = globalVarTable[k]
@@ -124,7 +125,7 @@
       parts = [ "]" , word[2:] , "" , "1" ]
       listsizes.append(varcount)
       varcount=stack.pop()
-      for key,item in varnames.iteritems(): stack_varnames[-1]["%s_%s"%(key,varname)] = item
+      for key,item in varnames.items(): stack_varnames[-1]["%s_%s"%(key,varname)] = item
       varnames=stack_varnames.pop()
     if varname=='directive': # Directive names are stored for use in #defines to convert variable names into output slot numbers
       if parts[2]=="": directive = parts[0]
@@ -152,7 +153,7 @@
   f_c.write("%d "%(varcount)) # First word on each statement definition line is the number of variables in the root slotspace
   f_c.write("%s\\n\\\n"%outline)
   processVarTable(vartable,directive,setoption)
-  for i,j in varnames.iteritems():
+  for i,j in varnames.items():
    if '%' not in directive:
     key = "PARSE_%s_%s%s"%(directive,setoption,sanitize(i))
     if (key in includeKeys) and (includeKeys[key]!=j): print "Repetition of key %s"%key
