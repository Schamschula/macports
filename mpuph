#!/opt/local/bin/python2.7

##
#	mpuph package
#
#	Generate and update checksums
#
#	1.0.1
#	20141024
##

import re, subprocess, sys

#	Get package name
pkg = sys.argv[1]

#	Variables and paths
p = subprocess.Popen(['port', 'file', pkg], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
pout, err = p.communicate()
pfpath = pout.rstrip()

v = subprocess.Popen(['port', 'info', '--version', pkg], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
vout, err = v.communicate()
version = vout.rstrip().split()[1]

a = subprocess.Popen(["ls /opt/local/var/macports/distfiles/" + pkg + "/*" + version + "*"], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
aout, err = a.communicate()
arpath = aout.rstrip()

#	Get hashes
m5 = subprocess.Popen(["openssl md5 " + arpath], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
m5out, err = m5.communicate()
md5 = m5out.rstrip().split()[1]

r = subprocess.Popen(["openssl rmd160 " + arpath], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rout, err = r.communicate()
rmd160 = rout.rstrip().split()[1]

s1 = subprocess.Popen(["openssl sha1 " + arpath], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
s1out, err = s1.communicate()
sha1 = s1out.rstrip().split()[1]

s2 = subprocess.Popen(["openssl sha256 " + arpath], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
s2out, err = s2.communicate()
sha256 = s2out.rstrip().split()[1]

#	Replace hashes
f = file(pfpath)
newlines = []
for line in f:
    if re.findall(r'md5', line):
        line = re.sub(r'\w{32}', md5, line)
        print "Replaced md5: " + md5
    if re.findall(r'rmd160', line):
        line = re.sub(r'\w{40}', rmd160, line)
        print "Replaced rmd160: " + rmd160
    if re.findall(r'sha1', line):
        line = re.sub(r'\w{40}', sha1, line)
        print "Replaced sha1: " + sha1
    if re.findall(r'sha256', line):
        line = re.sub(r'\w{64}', sha256, line)
        print "Replaced sha256: " + sha256
    newlines.append(line)

outfile = file(pfpath, 'w')
outfile.writelines(newlines)
