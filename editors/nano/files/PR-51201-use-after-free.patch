The pointer returned by dirname(3) is not to memory owned by the caller.  Thus,
the true branch was setting parentdir to an owned region and the false region
was not.  This change corrects the incorrect freeing of the pointer returned
by dirname as well as the memory leak of the argument to dirname.

See https://trac.macports.org/ticket/51201

--- src/files.c.orig	2016-02-25 12:47:10.000000000 -0800
+++ src/files.c	2016-04-21 20:47:15.000000000 -0700
@@ -43,7 +43,7 @@ bool has_valid_path(const char *filename
     if (strrchr(filename, '/') == NULL)
 	parentdir = mallocstrcpy(NULL, ".");
     else
-	parentdir = dirname(mallocstrcpy(NULL, filename));
+	parentdir = mallocstrcpy(NULL, dirname(filename));
 
     if (stat(parentdir, &parentinfo) == -1) {
 	if (errno == ENOENT)
