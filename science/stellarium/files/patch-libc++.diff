Upstream: https://bazaar.launchpad.net/~stellarium/stellarium/0.12/revision/5799
Notes: locally modified, replaced another instance of std::free()

=== modified file 'src/StelMainGraphicsView.cpp'
--- src/StelMainGraphicsView.cpp	2013-08-23 17:31:17 +0000
+++ src/StelMainGraphicsView.cpp	2013-10-20 15:33:37 +0000
@@ -43,6 +43,8 @@
 #include <QTimer>
 #include <QDir>
 
+#include <locale>
+
 #ifndef DISABLE_SCRIPTING
  #include "StelScriptMgr.hpp"
  #include "StelMainScriptAPIProxy.hpp"

=== modified file 'src/core/StelUtils.cpp'
--- src/core/StelUtils.cpp	2013-07-06 09:58:02 +0000
+++ src/core/StelUtils.cpp	2013-10-20 09:51:35 +0000
@@ -1065,8 +1065,8 @@
 QString hoursToHmsStr(const double hours)
 {
 	int h = (int)hours;
-	int m = (int)((std::abs(hours)-std::abs(h))*60);
-	float s = (((std::abs(hours)-std::abs(h))*60)-m)*60;
+	int m = (int)((std::abs(hours)-std::abs(double(h)))*60);
+	float s = (((std::abs(hours)-std::abs(double(h)))*60)-m)*60;
 
 	return QString("%1h%2m%3s").arg(h).arg(m).arg(QString::number(s, 'f', 1));
 }

=== modified file 'src/core/renderer/StelQGLArrayVertexBufferBackend.cpp'
--- src/core/renderer/StelQGLArrayVertexBufferBackend.cpp	2012-09-03 23:49:10 +0000
+++ src/core/renderer/StelQGLArrayVertexBufferBackend.cpp	2013-10-20 09:51:35 +0000
@@ -42,7 +42,7 @@
 		const StelVertexAttribute& attribute(this->attributes.attributes[attrib]);
 
 		attributeBuffers[attribute.interpretation] =
-			std::malloc(vertexCapacity * attributeSize(attribute.type));
+			::malloc(vertexCapacity * attributeSize(attribute.type));
 	}
 }
 
@@ -50,11 +50,11 @@
 {
 	for(int buffer = 0; buffer < AttributeInterpretation_MAX; ++buffer)
 	{
-		if(NULL != attributeBuffers[buffer]){std::free(attributeBuffers[buffer]);}
+		if(NULL != attributeBuffers[buffer]){::free(attributeBuffers[buffer]);}
 	}
 	if(NULL != projectedPositions)
 	{
-		std::free(projectedPositions);
+		::free(projectedPositions);
 	}
 }
 
@@ -71,7 +71,7 @@
 		{
 			const StelVertexAttribute& attribute(attributes.attributes[attrib]);
 			attributeBuffers[attribute.interpretation] = 
-				std::realloc(attributeBuffers[attribute.interpretation], 
+				::realloc(attributeBuffers[attribute.interpretation], 
 				             vertexCapacity * attributeSize(attribute.type));
 		}
 	}
@@ -167,12 +167,12 @@
 	if(Q_UNLIKELY(NULL == projectedPositions))
 	{
 		projectedPositions =
-			static_cast<Vec3f*>(std::malloc(minProjectedSize * sizeof(Vec3f)));
+			static_cast<Vec3f*>(::malloc(minProjectedSize * sizeof(Vec3f)));
 	}
 	else if(projectedPositionsCapacity < minProjectedSize)
 	{
 		projectedPositions =
-			static_cast<Vec3f*>(std::realloc(projectedPositions, minProjectedSize * sizeof(Vec3f)));
+			static_cast<Vec3f*>(::realloc(projectedPositions, minProjectedSize * sizeof(Vec3f)));
 		projectedPositionsCapacity = minProjectedSize;
 	}
 

=== modified file 'src/core/renderer/StelQGLInterleavedArrayVertexBufferBackend.cpp'
--- src/core/renderer/StelQGLInterleavedArrayVertexBufferBackend.cpp	2013-04-28 18:28:11 +0000
+++ src/core/renderer/StelQGLInterleavedArrayVertexBufferBackend.cpp	2013-10-20 09:51:35 +0000
@@ -42,15 +42,15 @@
 	}
 	// Align to VERTEX_ALIGN
 	vertexStride = (vertexBytes + VERTEX_ALIGN - 1) & ~(VERTEX_ALIGN - 1);
-	vertices = static_cast<char*>(std::malloc(vertexCapacity * vertexStride));
+	vertices = static_cast<char*>(::malloc(vertexCapacity * vertexStride));
 }
 
 StelQGLInterleavedArrayVertexBufferBackend::~StelQGLInterleavedArrayVertexBufferBackend()
 {
-	std::free(vertices);
+	::free(vertices);
 	if(NULL != projectedPositions)
 	{
-		std::free(projectedPositions);
+		::free(projectedPositions);
 	}
 }
 
@@ -63,7 +63,7 @@
 	if(Q_UNLIKELY(vertexCount == vertexCapacity))
 	{
 		vertexCapacity *= 2;
-		vertices = static_cast<char*>(std::realloc(vertices, vertexCapacity * vertexStride));
+		vertices = static_cast<char*>(::realloc(vertices, vertexCapacity * vertexStride));
 	}
 
 	std::memcpy(vertices + vertexCount * vertexStride, vertexInPtr, vertexBytes);
@@ -122,12 +122,12 @@
 	if(Q_UNLIKELY(NULL == projectedPositions))
 	{
 		projectedPositions =
-			static_cast<Vec3f*>(std::malloc(minProjectedSize * sizeof(Vec3f)));
+			static_cast<Vec3f*>(::malloc(minProjectedSize * sizeof(Vec3f)));
 	}
 	else if(projectedPositionsCapacity < minProjectedSize)
 	{
 		projectedPositions =
-			static_cast<Vec3f*>(std::realloc(projectedPositions, minProjectedSize * sizeof(Vec3f)));
+			static_cast<Vec3f*>(::realloc(projectedPositions, minProjectedSize * sizeof(Vec3f)));
 		projectedPositionsCapacity = minProjectedSize;
 	}
 

